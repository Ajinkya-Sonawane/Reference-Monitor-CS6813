"""
This security layer inadequately handles A/B storage for files in RepyV2.



Note:
    This security layer uses encasementlib.r2py, restrictions.default, repy.py and Python
    Also you need to give it an application to run.
    python repy.py restrictions.default encasementlib.r2py [security_layer].r2py [attack_program].r2py

    """
TYPE = "type"
ARGS = "args"
RETURN = "return"
EXCP = "exceptions"
TARGET = "target"
FUNC = "func"
OBJC = "objc"


class ABFile():
    def __init__(self, filename, create):
        # globals
        mycontext['debug'] = False

        # local (per object) reference to the underlying file
        self.Afn = filename + '.a'
        self.Bfn = filename + '.b'
        self.Ofn = filename
        self.create = create

        # make the files and add 'SE' to the readat file...
        if self.Ofn in listfiles():
                self.Ofile = openfile(self.Ofn, create)
        else:
            if not create:
                return
            self.Ofile = openfile(self.Ofn, True)
        if self.Afn in listfiles():
            self.Afile = openfile(self.Afn, not create)
        else:
            self.Afile = openfile(self.Afn, create)
            if create:
                self.Afile.writeat('SE', 0)
            else:
                self.Afile.writeat(self.Ofile.readat(None,0),0)
        self.Bfile = openfile(self.Bfn, True)

    def writeat(self, data, offset):
        # Write the requested data to the B file using the sandbox's writeat call
        data_len = len(self.Bfile.readat(None,0))
        if offset in range(0,data_len+1):
            self.Bfile.writeat(data, offset)

    def readat(self, bytes, offset):
        # Read from the A file using the sandbox's readat...
        data_len = len(self.Afile.readat(None,0))
        if offset in range(0,data_len+1):
            return self.Afile.readat(bytes, offset)
        else:
            return ""

    def checkValidity(self, fileObject):
        data_from_file = fileObject.readat(None,0)
        if len(data_from_file) > 1:
            if(data_from_file[0] == 'S' and data_from_file[-1] == 'E'):
                return True
        return False

    def copyFromBtoA(self,data_from_b):
        self.Afile.writeat(data_from_b,0)

    def close(self):
        if self.checkValidity(self.Afile) and self.checkValidity(self.Bfile):
            data_from_b = self.Bfile.readat(None,0)
            self.copyFromBtoA(data_from_b)
            self.Ofile.writeat(data_from_b,0)
        self.Ofile.close()
        self.Afile.close()
        self.Bfile.close()
        removefile(self.Bfn)

def ABopenfile(filename, create):
    return ABFile(filename, create)


# The code here sets up type checking and variable hiding for you.  You
# should not need to change anything below here.
sec_file_def = {"obj-type": ABFile,
                "name": "ABFile",
                "writeat": {"type": "func", "args": (str, int), "exceptions": Exception, "return": (int, type(None)),
                            "target": ABFile.writeat},
                "readat": {"type": "func", "args": ((int, type(None)), (int)), "exceptions": Exception, "return": str,
                           "target": ABFile.readat},
                "close": {"type": "func", "args": None, "exceptions": None, "return": (bool, type(None)),
                          "target": ABFile.close}
                }

CHILD_CONTEXT_DEF["ABopenfile"] = {TYPE: OBJC, ARGS: (str, bool), EXCP: Exception, RETURN: sec_file_def,
                                   TARGET: ABopenfile}

# Execute the user code
secure_dispatch_module()